from cancion import *

# Clase Nodo utilizado como los bloques del Arbol de Canciones, contiene un campo para el dato (cancion), que almacena y los nodos a su izqueirda y derecha
class Nodo(object):
    # Constructor de la clase Nodo
    def __init__(self, data):
        self.dato = data
        self.left = None
        self.right = None

    # Metodo para insertar en el Arbol de Canciones un nuevo objeto, el cual se espera que sea de tipo Cancion
    def insertar(self, elemento):
        if self.dato == elemento: # Se chequea primero si el elemento ya existe en el Arbol
            return False

        elif (self.dato.interprete != elemento.interprete): # De no ser asi, se procede a desplazarse por el arbol primero de acuerdo al interprete y considerando que este sea distinto a cualquier otro ya en la lista.
            if (self.dato.interprete > elemento.interprete):
                if self.left:
                    return self.left.insertar(elemento)
                else:
                    self.left = Nodo(elemento)
                    return True
            else:
                if self.right:
                    return self.right.insertar(elemento)
                else:
                    self.right = Nodo(elemento)
                    return True

        elif (self.dato.interprete == elemento.interprete): # De hallarse el mismo interprete en la lista, entonces se procede a desplazarse por el arbol comparando los titulos
            if (self.dato.titulo > elemento.titulo):
                if self.left:
                    return self.left.insertar(elemento)
                else:
                    self.left = Nodo(elemento)
                    return True
            else:
                if self.right:
                    return self.right.insertar(elemento)
                else:
                    self.right = Nodo(elemento)
                    return True

    # Metodo para hallar un objeto deseado en el Arbol
    def buscar(self, data):
        if self.dato == data:
            return True
        elif self.dato.interprete > data.interprete:
            if self.left:
                return self.left.buscar(data)
            else:
                return False
        else:
            if self.right:
                return self.right.buscar(data)
            else:
                return False

    # Metodo para mostrar en pantalla un recorrido in-order del Arbol de Canciones
    def inorder(self):
        if self:
            if self.left:
                self.left.inorder()
            print(str(self.dato.aString()))
            if self.right:
                self.right.inorder()

    # Metodo para hallar el objeto con los caracteres en su titulo y/o interprete mas alfabeticamente primerizos de la lista
    def minimo(self, subArbol):
        act = subArbol
        while act.left is not None:
            act = act.left
        return act.dato

    # Metodo para eliminar un objeto Cancion del Arbol de Canciones, mediante la obtencion de un titulo e interprete
    def eliminar(self, interprete, titulo):
        if self.dato is None: # Si el arbol esta vacio entonces se retorna False
            return self.dato

        if interprete < self.dato.interprete: # Primero se comienza a buscar el nodo deseado comparando el apartado Interprete
            self.left = self.left.eliminar(interprete, titulo)
        elif interprete > self.dato.interprete:
            self.right = self.right.eliminar(interprete, titulo)
        else: 
            if titulo < self.dato.titulo:  # Luego de esto se procede a comparar los titulos y asegurarse que si coincidan ambos interprete y titulo con el elemento que se desea eliminar
                self.left = self.left.eliminar(interprete, titulo)
            elif titulo > self.dato.titulo:
                self.right = self.right.eliminar(interprete, titulo)
            else:
                if self.left is None:  # Cubrir lo casos donde el nodo tengo ningun o un hijo
                    temp = self.right
                    self.dato = None
                    return temp
                elif self.right is None:
                    temp = self.left
                    self.dato = None
                    return temp

                
                temp = self.right.minimo()

                self.dato.titulo = temp.titulo
                self.dato.interprete = temp.interprete
                self.dato.ubicacion = temp.ubicacion

                self.right = self.right.eliminar(temp.interprete, temp.titulo)
        
        return self.dato

    # Metodo para obtener de forma in-order los elementos de un Arbol de Canciones y anexarlos a una lista provista
    def secuenciar(self, lista):
        if self:
            if self.left:
                self.left.inorder()
            lista.append(self.dato)
            if self.right:
                self.right.inorder()

# Clase ArbolDeCanciones, un Arbol Binario de Busqueda cuyos elementos seran nodos que continen objetos de tipo cancion.            
class arbolDeCanciones(object):
    # Constructor de la clase arbolDeCanciones
    def __init__(self):
        self.raiz = None
    
    # Metodo para insertar en el Arbol de Canciones un nuevo objeto, el cual se espera que sea de tipo Cancion
    def insertar(self, elemento):
        if self.raiz:
            return self.raiz.insertar(elemento)
        else:
            self.raiz = Nodo(elemento)
            return True
    
    # Metodo para buscar en el arbol un dato dado
    def buscar(self, data):
        if self.raiz:
            return self.raiz.buscar(data)
        else:
            return False

    # Metodo para imprimir en pantalla todos los objetos almacenados en el Arbol de Canciones en forma in-order
    def inorder(self):
        print("En-Orden: ")
        self.raiz.inorder()

    # Metodo para hallar el elemento mas a la izquierda de un arbol o subarbol dado
    def minimo(self, subArbol):
        act = subArbol
        while act.left is not None:
            act = act.left
        return act.dato

    # Metodo para hallar el elemento mas a la derecha de un arbol o subarbol dado
    def maximo(self, subArbol):
        act = subArbol
        while act.right is not None:
            act = act.right
        return act.dato

    # Metodo para eliminar una cancion dada por su titulo e interprete del Arbol de Canciones
    def eliminar(self, interprete, titulo):
        print("Se procedera a eliminar la cancion " + str(titulo) + " del artista " + str(interprete) + " si existe en la lista de reproduccion.")
        if self.raiz is None:
            return False
        else:
            return self.raiz.eliminar(interprete, titulo)

    # Metodo para anexar los elementos de tipo cancion del Arbol de Canciones a una lista
    def deArbolASecuencia(self):
        lista = []
        if self.raiz is None:
            return lista
        else:            
            self.raiz.secuenciar(lista)

        return lista
